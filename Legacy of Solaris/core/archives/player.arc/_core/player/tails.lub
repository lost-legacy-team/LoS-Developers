script.reload("player/common.lua")
function SetupModuleSub(param1)
  OpenGameMaster(param1, gamemaster_module_player)
  OpenWeapons(param1, other_module_tails_weapons)
  OpenOther(param1, other_module_amigo_change)
  OpenEffect(param1, effect_module_tails, "player_tails")
  OpenSound(param1, sound_module_tails, "player_tails")
  OpenAI(param1, ai_module_amigo)
  OpenLockOn(param1, "lockon_chase", stepable_pre)
  OpenOther(param1, other_module_talk)
  OpenLockOn(param1, "lockon", stepable_inter)
end
function SetupModuleDebugSub(param1)
end
c_lockon_chase = {
  type = shape_convex_box,
  near_x = 5 * meter,
  near_y = 6 * meter,
  z = 13 * meter,
  far_x = 15 * meter,
  far_y = 13 * meter,
  sort = lockon_sort_priority_and_distance,
  lockon = lockon_type_chase
}
c_player_name = "tails"
debug = not_use
c_module_state = state_module_tails
c_module_model = model_module_sonic_new
c_system_model = model_system_standard
c_posture_control = posture_control_normal
c_input_system = input_system_normal
c_module_gravity = use
c_model_package = "player/tails"
c_module_impulse = impulse_module_standard
c_framelink = {
  {
    from = "RightMustache",
    to = "RightMustache01"
  },
  {
    from = "LeftMustache",
    to = "LeftMustache01"
  }
}
c_input_border = 0.1
c_dclick_time = 0.16 * sec
c_lclick_time = 0.16 * sec
script.reload("player/collision_standard.lua")
c_lockon = {
  type = shape_frustum,
  near_x = 1 * meter,
  near_y = 1 * meter,
  z = 10 * meter,
  fov = 30 * deg,
  sort = lockon_sort_priority_and_distance,
  lockon = lockon_type_lockon
}
c_rotation_method = input_method_mario64
c_rotation_speed = 1 * (meter / sec)
c_weight = 20 * kg
c_slope_rad = 40 * deg
c_slope_rad_b = 30 * deg
c_downforce = 0.2 * meter
c_brake_acc = 40 * meter
c_walk_border = 0.17
c_run_border = 0.6
c_walk_speed_max = 3 * (meter / sec)
c_run_speed_max = 20 * (meter / sec)
c_jump_time_min = 0.1 * sec
c_jump_brake = 16 * (meter / sec)
c_jump_speed_acc = 20 * meter
c_jump_speed_brake = 10 * meter
l_run_acc = 2 * sec
l_jump_hight = 8 * meter
l_jump_walk = 10 * meter
l_jump_run = 12 * meter
c_brake_quick_acc = 30 * meter
c_wait_no_input_time = 15 * sec
c_damage_time = 1 * sec
c_damage_jump = 2 * (meter / sec)
c_damage_speed = -1 * (meter / sec)
c_run_against_time = 1 * sec
c_grind_speed_org = 23 * (meter / sec)
c_grind_acc = 15 * meter
c_grind_speed_max = 35 * meter
c_grind_time = 0.7 * sec
c_grind_penalty_time = 0.5 * sec
c_grind_brake_acc = 1 * meter
c_brake_dashpanel = 10 * meter
c_speedup_speed_max = 25 * (meter / sec)
l_speedup_acc = 0.5 * sec
c_run_acc = (c_run_speed_max - c_walk_speed_max) / l_run_acc
c_jump_speed = 9.5 * (meter / sec)
c_jump_walk = 10 * (meter / sec)
c_jump_run = 12 * (meter / sec)
c_speedup_acc = (c_speedup_speed_max - c_walk_speed_max) / l_speedup_acc
c_brake_acc_sand = c_brake_acc * 2
c_run_acc_sand = c_run_acc * 0.5
c_jump_speed_sand = SpeedByHeightBias(c_jump_speed, 0.5)
c_flight_speed_acc = 17 * (meter / (sec * sec))
c_flight_speed_min = 10 * (meter / sec)
c_flight_speed_max = 17 * (meter / sec)
c_flight_timer = 3.5 * sec
c_flight_timer_b = 1.5 * sec
c_flight_acc = 16 * meter
c_ignore_spread_time = 0.1 * sec
